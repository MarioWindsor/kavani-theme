<style>
	input[type=number]::-webkit-inner-spin-button, 
	input[type=number]::-webkit-outer-spin-button { 
	  -webkit-appearance: none; 
	  margin: 0; 
	  opacity: 1;
	}
</style>
<!-- Cart Section -->
<section id="cart-section" class="cart-section space-100-top">
	<div class="row">
		<div class="container">
			<div class="columns small-12 space-100-bottom">
				<h1 class="collection-title block h5 strong text-uppercase text-center">Cart</h1>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="container">
			{% if cart.item_count > 0 %}
			<div class="columns small-12">
				<form action="{{ routes.cart_url }}" method="post" novalidate class="">
					<div class="cart fill-orange text-dark space-100 radius-25 box-border-dark">
						<!-- Cart Item -->
						{% for item in cart.items %}
							<div class="cart-item row space">
								<div class="columns small-12">
									<div class="row">
										<div class="columns small-4 large-2">
											{% if item.image %}
												<a class="block" href="{{ item.url }}">
													<img class="block radius-25 box-shadow-red" src="{{ item.image | img_url: 'medium' }}" alt="{{ item.image.alt | escape }}">
												</a>
											{% endif %}
										</div>
										<div class="columns small-7 small-offset-1 large-9">
											<div class="row">
												<div class="columns small-12 large-8">
													<div class="row">
														<div class="columns small-12">
															<div class="small space-min-bottom text-uppercase">{{ item.product.category | escape }}</div>
															<a class="block p text-red text-uppercase strong space-25-bottom" href="{{ item.url }}">{{ item.product.title | escape }}</a>
															{% if item.variant.title != 'Default Title' %}
																<div class="block label strong text-uppercase space-min-bottom">{{ item.variant.title | escape }}</div>
															{% endif %}
															<div class="block label strong space-50-bottom no-wrap">{{ item.price | money }}</div>
														</div>
														<div class="columns small-12 medium-9 large-4">
														    <label class="quantity form-field block space-50-bottom">
														        <span class="form-label block small text-uppercase space-min-bottom">Quantity</span>
														        <div class="quantity-buttons" style="display: flex; gap: var(--space-25);">
														            <button type="button" class="button inline-bottom fill-white text-dark box-border-dark quantity-less" aria-label="Decrease quantity" style="position: relative; padding: 0 var(--space-25); width: var(--space-150); flex-grow: 0; flex-shrink: 0;">
														                <i class='bx bx-minus h6' style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);"></i>
														            </button>
														            <input class="input-field inline-bottom text-center cart-item-quantity"
														                   type="number"
														                   name="updates[]"
														                   id="updates_{{ item.key }}"
														                   value="{{ item.quantity }}"
														                   min="0"
														                   data-key="{{ item.key }}"
														                   aria-label="Quantity for {{ item.title | escape }}"
														                   style="width: var(--space-250); flex-grow: 2; flex-shrink: 2;">
														            <button type="button" class="button inline-bottom fill-white text-dark box-border-dark quantity-more" aria-label="Increase quantity" style="position: relative; padding: 0 var(--space-25); width: var(--space-150); flex-grow: 0; flex-shrink: 0;">
														                <i class='bx bx-plus h6' style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);"></i>
														            </button>
														            <a href="{{ routes.cart_change_url }}?line={{ forloop.index }}&quantity=0" class="button inline-bottom icon-button fill-white text-dark box-border-dark" aria-label="Remove {{ item.title | escape }}" style="position: relative; padding: 0 var(--space-25); width: var(--space-150); flex-grow: 0; flex-shrink: 0;">
														                <span class="visuallyhidden">Remove</span>
														                <i class='bx bx-trash h6' style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);"></i>
														            </a>
														        </div>
														    </label>
														</div>
													</div>
												</div>
												<div class="columns small-12 large-3 large-offset-1">
													<label class="block">
														<span class="small text-uppercase space-min-bottom">Total</span>
														<div class="p strong no-wrap cart-item-line-price">{{ item.final_line_price | money }}</div>
													</label>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
							<hr style="margin: var(--space-100) 0;">
						{% endfor %}
						<!-- END: Cart Item -->
						<div class="row">
							<div class="columns small-6 medium-8 large-9">
								<div class="car-subtotal">
									<div class="label strong text-uppercase">Subtotal:</div>
									<span class="h5 strong cart-subtotal-amount">{{ cart.total_price | money }}</span>
								</div>		
							</div>
							<div class="columns small-6 medium-4 large-3">
								<button type="submit" name="checkout" class="block button fill-red box-shadow-white-2">Check Out</button>		
							</div>
						</div>						
					</div>
				</form>
			</div>
			{% else %}
			<div class="text-center columns small-12">
				<div class="p strong space-100-bottom">Your cart is currently empty.</div>
				<a class="button inline fill-dark box-shadow-white-2" href="{{ routes.all_products_collection_url }}">Continue shopping</a>
			</div>
			{% endif %}
		</div>
	</div>
</section>
<!-- END: Cart Section -->


<script>
	document.addEventListener('DOMContentLoaded', () => {
	    // Select all quantity inputs using the class we added
	    const quantityInputs = document.querySelectorAll('.cart-item-quantity');

	    quantityInputs.forEach(input => {
	        // Find the closest parent div containing the buttons relative to the input
	        const quantityButtonsContainer = input.closest('.quantity-buttons');
	        if (!quantityButtonsContainer) return; // Skip if container not found

	        // Select the less and more buttons using their new classes within that container
	        const lessButton = quantityButtonsContainer.querySelector('.quantity-less');
	        const moreButton = quantityButtonsContainer.querySelector('.quantity-more');

	        if (!lessButton || !moreButton) {
	            console.warn('Quantity toggle buttons not found for a cart item.');
	            return;
	        }

	        // Function to update cart via Shopify's AJAX API
	        const updateCart = () => {
	            // Get the cart form
	            const cartForm = input.closest('form');
	            if (cartForm) {
	                // Send the form data to Shopify's cart update endpoint
	                fetch(cartForm.action, {
	                    method: cartForm.method,
	                    body: new FormData(cartForm) // Sends all form data
	                })
	                .then(response => response.json()) // Expect JSON from Shopify
	                .then(cart => {
	                    // This will cause a full page reload, simplest way to reflect all cart changes
	                    window.location.reload();
	                })
	                .catch(error => {
	                    console.error('Error updating cart:', error);
	                    // Handle error (e.g., show a message, revert input value)
	                });
	            }
	        };

	        // Event listener for "less" button
	        lessButton.addEventListener('click', () => {
	            let currentValue = parseInt(input.value);
	            const minValue = parseInt(input.min); // Will now be 0

	            if (currentValue > minValue) {
	                input.value = currentValue - 1;
	            } else if (currentValue === minValue) {
	                // If current quantity is 0 (or less than min), set to 0 to remove on update
	                // This handles cases where min is 0 and user tries to decrement from 0
	                input.value = 0;
	            }
	            updateCart(); // Trigger the cart update after local quantity change
	        });

	        // Event listener for "more" button
	        moreButton.addEventListener('click', () => {
	            let currentValue = parseInt(input.value);
	            input.value = currentValue + 1;
	            updateCart(); // Trigger the cart update after local quantity change
	        });

	        // Optional but recommended for direct input changes on cart page
	        input.addEventListener('change', () => {
	            let currentValue = parseInt(input.value);
	            const minValue = parseInt(input.min);

	            // Sanitize input: ensure it's a number and not negative
	            if (isNaN(currentValue) || currentValue < 0) {
	                input.value = minValue; // Reset to min (0) if invalid or negative
	            } else {
	                input.value = currentValue; // Ensure input displays the sanitized value
	            }

	            updateCart(); // Trigger update for manual input changes
	        });
	    });
	});
</script>
